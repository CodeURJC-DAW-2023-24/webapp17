{{> header}}
<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <title>Estadísticas</title>
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: Arial, sans-serif; background: #f4f6f8; color: #333; }
    h1, h2 { text-align: center; margin-top: 1em; }
    .chart-container { width: 80%; max-width: 800px; margin: 2em auto; margin-bottom: 2rem; background: #fff; padding: 1em; border-radius: 12px; box-shadow: 0 4px 8px rgba(0,0,0,0.1); }
  </style>
</head>
<body>
  {{#ADMIN}}
    <h1 style="margin-top: 3rem;">🔒 Panel de Estadísticas (Admin)</h1>
  {{/ADMIN}}


  <div class="chart-container">
    <h2>👥 Usuarios con más posts</h2>
    <canvas id="usersChart"></canvas>
  </div>

  <div class="chart-container">
    <h2>💬 Posts con más comentarios</h2>
    <canvas id="postsChart"></canvas>
  </div>

  <div class="chart-container">
    <h2>🏷️ Tags con más posts</h2>
    <canvas id="tagsChart"></canvas>
  </div>

  <script>
    async function fetchData(url) {
      const res = await fetch(url);
      return res.ok ? res.json() : [];
    }

    function getRandomColor(alpha) {
      const r = Math.floor(Math.random() * 200 + 20);
      const g = Math.floor(Math.random() * 200 + 20);
      const b = Math.floor(Math.random() * 200 + 20);
      return `rgba(${r}, ${g}, ${b}, ${alpha})`;
    }

    async function renderChart(ctxId, labels, data, labelText) {
      const colors = labels.map(() => getRandomColor(0.6));
      const borders = colors.map(c => c.replace(/0\.6/, '1'));
      new Chart(document.getElementById(ctxId), {
        type: 'bar',
        data: {
          labels: labels,
          datasets: [{
            label: labelText,
            data: data,
            backgroundColor: colors,
            borderColor: borders,
            borderWidth: 1,
            hoverOffset: 10
          }]
        },
        options: {
          responsive: true,
          animation: {
            duration: 1200,
            easing: 'easeOutQuart'
          },
          plugins: {
            legend: { display: false },
            tooltip: { enabled: true }
          },
          scales: {
            x: { grid: { display: false } },
            y: { beginAtZero: true }
          }
        }
      });
    }

    async function renderCharts() {
      const users = await fetchData('/users-with-most-posts');
      await renderChart(
        'usersChart',
        users.map(u => u.user),
        users.map(u => u.postCount),
        'Posts por usuario'
      );

      const posts = await fetchData('/posts-with-most-comments');
      await renderChart(
        'postsChart',
        posts.map(p => p.title),
        posts.map(p => p.commentCount),
        'Comentarios por post'
      );

      const tags = await fetchData('/tags-with-most-posts');
      await renderChart(
        'tagsChart',
        tags.map(t => t.tag),
        tags.map(t => t.count),
        'Posts por etiqueta'
      );
    }

    renderCharts();
  </script>
</body>
  {{> footer}}


